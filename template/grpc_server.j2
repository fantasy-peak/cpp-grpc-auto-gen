/**
 *
 *  @file {{grpc.out_file | get_filename }}
 *  @author fantasy-peak
 *  Auto generate by https://github.com/fantasy-peak/cpp-grpc-auto-gen.git
 *  Copyright 2024, fantasy-peak. All rights reserved.
 *  Use of this source code is governed by a MIT license
 *  that can be found in the License file.
 *
 */

#pragma once

#include <functional>
#include <memory>
#include <thread>
#include <utility>
#include <vector>

#ifdef AGRPC_BOOST_ASIO
#include <boost/asio.hpp>
#include <boost/asio/awaitable.hpp>
#include <boost/asio/detached.hpp>
#include <boost/asio/experimental/awaitable_operators.hpp>
#include <boost/asio/experimental/concurrent_channel.hpp>
#include <boost/asio/post.hpp>
#include <boost/asio/use_awaitable.hpp>
#include <boost/system/detail/error_code.hpp>
#else
#include <asio.hpp>
#include <asio/awaitable.hpp>
#include <asio/detached.hpp>
#include <asio/experimental/awaitable_operators.hpp>
#include <asio/experimental/concurrent_channel.hpp>
#include <asio/post.hpp>
#include <asio/use_awaitable.hpp>
#include <system/detail/error_code.hpp>
#endif

{% for name in grpc.include_grpc_files -%}
#include <{{ name }}>
{% endfor -%}
#include <health.grpc.pb.h>
#include <health.pb.h>

#include <grpcpp/server.h>
#include <grpcpp/server_builder.h>
#ifdef OPEN_GRPC_REFLECTION_PLUGIN
#include <grpcpp/ext/proto_server_reflection_plugin.h>
#endif
#include <agrpc/asio_grpc.hpp>
#include <agrpc/health_check_service.hpp>

namespace {{grpc.namespace}} {

#ifdef AGRPC_BOOST_ASIO
namespace asio = boost::asio;
#endif

enum class LogLevel : uint8_t {
    Info,
    Error,
};

consteval std::string_view extractFilename(const char* path) {
    std::string_view path_view{path};
    std::size_t last_slash = path_view.find_last_of("/\\");
    return (last_slash == std::string_view::npos)
               ? path_view
               : path_view.substr(last_slash + 1);
}

struct RethrowFirstArg {
    template <class... T>
    void operator()(std::exception_ptr ep, T&&...) {
        if (ep) {
            std::rethrow_exception(ep);
        }
    }

    template <class... T>
    void operator()(T&&...) {}
};

struct GrpcConfig {
    std::string host;
    int32_t thread_count{2};
    int32_t keepalive_time_ms{10000};
    int32_t keepalive_timeout_ms{10000};
    int32_t keepalive_permit_without_calls{1};
    int32_t http2_max_pings_without_data{0};
    int32_t http2_min_sent_ping_interval_without_data_ms{10000};
    int32_t http2_min_recv_ping_interval_without_data_ms{5000};
    std::optional<int32_t> min_pollers;
    std::optional<int32_t> max_pollers;
};

template <auto RequestRPC>
using AwaitableServerRPC = asio::use_awaitable_t<>::as_default_on_t<agrpc::ServerRPC<RequestRPC>>;

{% for service_name in grpc.interface -%}
using {{service_name}}Service = {{grpc.package}}::{{service_name}}::AsyncService;
{% for interface in grpc.interface[service_name] -%}
using {{service_name}}{{interface.name}}RPC = AwaitableServerRPC<&{{service_name}}Service::Request{{interface.name}}>;
{% endfor -%}
{% endfor -%}

#ifdef AGRPC_BOOST_ASIO
template <typename T>
using ConcurrentChannel = asio::experimental::concurrent_channel<void(boost::system::error_code, T)>;
#else
template <typename T>
using ConcurrentChannel = asio::experimental::concurrent_channel<void(asio::error_code, T)>;
#endif

/*************************************************** */
#if USE_GRPC_NOTIFY_WHEN_DONE
struct ServerRPCNotifyWhenDoneTraits : agrpc::DefaultServerRPCTraits {
    static constexpr bool NOTIFY_WHEN_DONE = true;
};

template <auto RequestRPC>
using NotifyWhenDoneServerRPC =
    agrpc::ServerRPC<RequestRPC, ServerRPCNotifyWhenDoneTraits>;


{% for service_name in grpc.interface %}
{% for interface in grpc.interface[service_name] %}
{% if interface.type=='server-streaming-rpc' %}
using {{service_name}}{{interface.name}}NotifyWhenDoneRPC = NotifyWhenDoneServerRPC<&{{service_name}}Service::Request{{interface.name}}>;
{% else -%}

{% endif -%}
{% endfor %}
{% endfor %}
#endif
/*************************************************** */

class {{grpc.class_name}} final {
public:
    {{grpc.class_name}}(GrpcConfig config)
        : m_config(std::move(config)) {
    }
    ~{{grpc.class_name}}() = default;

    {{grpc.class_name}}(const {{grpc.class_name}}&) = delete;
    {{grpc.class_name}}& operator=(const {{grpc.class_name}}&) = delete;
    {{grpc.class_name}}({{grpc.class_name}}&&) = delete;
    {{grpc.class_name}}& operator=({{grpc.class_name}}&&) = delete;

    static auto create(GrpcConfig config) {
        return std::make_unique<{{grpc.class_name}}>(std::move(config));
    }

    void start() {
        checkCallback();
        grpc::ServerBuilder builder;
        for (int i = 0; i < m_config.thread_count; i++) {
            m_grpc_contexts.emplace_back(std::make_shared<agrpc::GrpcContext>(builder.AddCompletionQueue()));
        }
        auto creds = grpc::InsecureServerCredentials();
        if (m_create_server_credentials)
            creds = m_create_server_credentials();
        builder.AddListeningPort(m_config.host, creds);
#ifdef OPEN_GRPC_REFLECTION_PLUGIN
        m_log(LogLevel::Info, extractFilename(__FILE__), __LINE__, "call InitProtoReflectionServerBuilderPlugin");
        grpc::reflection::InitProtoReflectionServerBuilderPlugin();
#endif
        {% for service_name in grpc.interface -%}
        m_{{service_name|to_snake}}_service = std::make_unique<{{service_name}}Service>();
        builder.RegisterService(m_{{service_name|to_snake}}_service.get());
        {% endfor %}

        // https://stackoverflow.com/questions/64297617/grpc-c-how-to-detect-client-disconnected-in-async-server
        grpc::ChannelArguments args;
        // keepalive
        builder.AddChannelArgument(GRPC_ARG_KEEPALIVE_TIME_MS, m_config.keepalive_time_ms);
        builder.AddChannelArgument(GRPC_ARG_KEEPALIVE_TIMEOUT_MS, m_config.keepalive_timeout_ms);
        builder.AddChannelArgument(GRPC_ARG_KEEPALIVE_PERMIT_WITHOUT_CALLS, m_config.keepalive_permit_without_calls);
        builder.AddChannelArgument(GRPC_ARG_HTTP2_MAX_PINGS_WITHOUT_DATA, m_config.http2_max_pings_without_data);
        builder.AddChannelArgument(GRPC_ARG_HTTP2_MIN_SENT_PING_INTERVAL_WITHOUT_DATA_MS, m_config.http2_min_sent_ping_interval_without_data_ms);
        builder.AddChannelArgument(GRPC_ARG_HTTP2_MIN_RECV_PING_INTERVAL_WITHOUT_DATA_MS, m_config.http2_min_recv_ping_interval_without_data_ms);
        if (m_add_channel_argument)
            m_add_channel_argument(builder);

        if (m_config.min_pollers.has_value())
            builder.SetSyncServerOption(grpc::ServerBuilder::MIN_POLLERS, m_config.min_pollers.value());
        if (m_config.max_pollers.has_value())
            builder.SetSyncServerOption(grpc::ServerBuilder::MAX_POLLERS, m_config.max_pollers.value());

        agrpc::add_health_check_service(builder);
        m_server_ptr = builder.BuildAndStart();
        agrpc::start_health_check_service(*m_server_ptr, *m_grpc_contexts[0]);

        for (int32_t i = 0; i < m_config.thread_count; ++i) {
            m_threads.emplace_back([this, i] {
                auto& grpc_context = *m_grpc_contexts[i];
                registerHandler(grpc_context);
                grpc_context.run();
            });
        }
    }

    void stop() {
        if (m_grpc_contexts.empty())
            return;
        asio::post(*m_grpc_contexts[0], [&] { m_server_ptr->Shutdown(); });
        for (auto& thread : m_threads)
            thread.join();
        m_grpc_contexts.clear();
        m_threads.clear();
    }

    void setCreateSslServerCredentialsCallback(auto cb) {
        m_create_server_credentials = std::move(cb);
    }

    void setAddChannelArgumentCallback(auto cb) {
        m_add_channel_argument = std::move(cb);
    }

    void setLogCallback(auto cb) {
        m_log = std::move(cb);
    }

    {% for service_name in grpc.interface -%}
    {% for interface in grpc.interface[service_name] -%}
    void set{{service_name}}{{interface.name}}RpcCallback(auto cb) {
        m_{{service_name|to_snake}}_{{interface.name|to_snake}}_rpc_handler = std::move(cb);
    }
    {% endfor -%}
    {% endfor %}


#if USE_GRPC_NOTIFY_WHEN_DONE
    {% for service_name in grpc.interface %}
    {%- for interface in grpc.interface[service_name] -%}
    {%- if interface.type=='server-streaming-rpc' -%}
    void set{{service_name}}{{interface.name}}NotifyWhenDoneRpcCallback(auto cb) {
        m_{{service_name|to_snake}}_{{interface.name|to_snake}}_notify_when_done_rpc_handler = std::move(cb);
    }
    {%- else -%}
    {%- endif -%}
    {%- endfor -%}
    {% endfor %}
#endif

private:
    void checkCallback() {
#if USE_GRPC_NOTIFY_WHEN_DONE
        {%- for service_name in grpc.interface -%}
        {% for interface in grpc.interface[service_name] %}
        {% if interface.type=='server-streaming-rpc' -%}
            if (!m_{{service_name|to_snake}}_{{interface.name|to_snake}}_notify_when_done_rpc_handler)
                throw std::runtime_error("not call set{{service_name}}{{interface.name}}NotifyWhenDoneRpcCallback");
        {%- else -%}
            if (!m_{{service_name|to_snake}}_{{interface.name|to_snake}}_rpc_handler)
                throw std::runtime_error("not call set{{service_name}}{{interface.name}}RpcCallback");
        {%- endif -%}
        {% endfor %}
        {% endfor -%}
#else
        {% for service_name in grpc.interface -%}
        {% for interface in grpc.interface[service_name] -%}
            if (!m_{{service_name|to_snake}}_{{interface.name|to_snake}}_rpc_handler)
                throw std::runtime_error("not call set{{service_name}}{{interface.name}}RpcCallback");
        {% endfor -%}
        {% endfor -%}
#endif
    }

    void registerHandler(auto& grpc_context) {
#if USE_GRPC_NOTIFY_WHEN_DONE
        {%- for service_name in grpc.interface -%}
        {%- for interface in grpc.interface[service_name] -%}
        {% if interface.type=='server-streaming-rpc' %}

        agrpc::register_awaitable_rpc_handler<
            {{service_name}}{{interface.name}}NotifyWhenDoneRPC>(
            grpc_context,
            *m_{{service_name|to_snake}}_service,
            [this]({{service_name}}{{interface.name}}NotifyWhenDoneRPC& rpc,
                {{service_name}}{{interface.name}}NotifyWhenDoneRPC::Request& request) -> asio::awaitable<void> {
                try {
                    co_await m_{{service_name|to_snake}}_{{interface.name|to_snake}}_notify_when_done_rpc_handler(rpc, request);
                } catch (const std::exception& e) {
                    m_log(LogLevel::Error, extractFilename(__FILE__), __LINE__, e.what());
                }
                co_return;
            },
            RethrowFirstArg{});
        
        {% elif interface.type=='bidirectional-streaming-rpc' or interface.type=='client-streaming-rpc' %}
        agrpc::register_awaitable_rpc_handler<{{service_name}}{{interface.name}}RPC>(
            grpc_context,
            *m_{{service_name|to_snake}}_service,
            [this]({{service_name}}{{interface.name}}RPC& rpc) -> asio::awaitable<void> {
                try {
                    co_await m_{{service_name|to_snake}}_{{interface.name|to_snake}}_rpc_handler(rpc);
                } catch (const std::exception& e) {
                    m_log(LogLevel::Error, extractFilename(__FILE__), __LINE__, e.what());
                }
                co_return;
            },
            RethrowFirstArg{});
        {% else %}
        agrpc::register_awaitable_rpc_handler<{{service_name}}{{interface.name}}RPC>(
            grpc_context,
            *m_{{service_name|to_snake}}_service,
            [this]({{service_name}}{{interface.name}}RPC& rpc, {{grpc.package}}::{{interface.input}}& request) -> asio::awaitable<void> {
                try {
                    co_await m_{{service_name|to_snake}}_{{interface.name|to_snake}}_rpc_handler(rpc, request);
                } catch (const std::exception& e) {
                    m_log(LogLevel::Error, extractFilename(__FILE__), __LINE__, e.what());
                }
                co_return;
            },
            RethrowFirstArg{});
        {% endif -%}
        {%- endfor -%}
        {%- endfor -%}
#else
        {%- for service_name in grpc.interface -%}
        {% for interface in grpc.interface[service_name] %}
        {% if interface.type=='bidirectional-streaming-rpc' or interface.type=='client-streaming-rpc' %}
        agrpc::register_awaitable_rpc_handler<{{service_name}}{{interface.name}}RPC>(
            grpc_context,
            *m_{{service_name|to_snake}}_service,
            [this]({{service_name}}{{interface.name}}RPC& rpc) -> asio::awaitable<void> {
                try {
                    co_await m_{{service_name|to_snake}}_{{interface.name|to_snake}}_rpc_handler(rpc);
                } catch (const std::exception& e) {
                    m_log(LogLevel::Error, extractFilename(__FILE__), __LINE__, e.what());
                }
                co_return;
            },
            RethrowFirstArg{});
        {% else -%}
        agrpc::register_awaitable_rpc_handler<{{service_name}}{{interface.name}}RPC>(
            grpc_context,
            *m_{{service_name|to_snake}}_service,
            [this]({{service_name}}{{interface.name}}RPC& rpc, {{grpc.package}}::{{interface.input}}& request) -> asio::awaitable<void> {
                try {
                    co_await m_{{service_name|to_snake}}_{{interface.name|to_snake}}_rpc_handler(rpc, request);
                } catch (const std::exception& e) {
                    m_log(LogLevel::Error, extractFilename(__FILE__), __LINE__, e.what());
                }
                co_return;
            },
            RethrowFirstArg{});
        {% endif -%}
        {% endfor %}
        {% endfor %}
#endif
    }

    GrpcConfig m_config;
    std::function<void(LogLevel, std::string_view, int, std::string)> m_log = [](auto, auto, auto, auto) {};
    std::function<void(grpc::ServerBuilder&)> m_add_channel_argument;

    {% for service_name in grpc.interface -%}
    {% for interface in grpc.interface[service_name] -%}
    {% if interface.type=='bidirectional-streaming-rpc' or interface.type=='client-streaming-rpc' %}
    std::function<asio::awaitable<void>({{service_name}}{{interface.name}}RPC&)> m_{{service_name|to_snake}}_{{interface.name|to_snake}}_rpc_handler;
    {% else -%}
    std::function<asio::awaitable<void>({{service_name}}{{interface.name}}RPC&, {{grpc.package}}::{{interface.input}}&)> m_{{service_name|to_snake}}_{{interface.name|to_snake}}_rpc_handler;
    {% endif -%}
    {% endfor -%}
    {% endfor -%}

#if USE_GRPC_NOTIFY_WHEN_DONE
    {% for service_name in grpc.interface %}
    {% for interface in grpc.interface[service_name] %}
    {% if interface.type=='server-streaming-rpc' %}
    std::function<
        asio::awaitable<void>({{service_name}}{{interface.name}}NotifyWhenDoneRPC&, 
        {{service_name}}{{interface.name}}NotifyWhenDoneRPC::Request&)> m_{{service_name|to_snake}}_{{interface.name|to_snake}}_notify_when_done_rpc_handler;
    {% else %}
    {% endif %}
    {% endfor %}
    {% endfor %}
#endif

    std::function<std::shared_ptr<grpc::ServerCredentials>()> m_create_server_credentials;
    {% for service_name in grpc.interface -%}
    std::unique_ptr<{{service_name}}Service> m_{{service_name|to_snake}}_service;
    {% endfor -%}
    std::unique_ptr<grpc::Server> m_server_ptr;
    std::vector<std::shared_ptr<agrpc::GrpcContext>> m_grpc_contexts;
    std::vector<std::thread> m_threads;
};

} // {{grpc.namespace}}

/* example

#ifndef AGRPC_BOOST_ASIO
#define AGRPC_BOOST_ASIO 1
#endif

#ifndef USE_BOOST_CIRCULAR_BUFFER
#define USE_BOOST_CIRCULAR_BUFFER 1
#endif

#include <{{grpc.out_file | get_filename }}>

int main() {
    {{grpc.namespace}}::GrpcConfig config{
        .host = "0.0.0.0:5566",
        .thread_count = 1,
        .keepalive_time_ms = 10000,
        .keepalive_timeout_ms = 10000,
        .keepalive_permit_without_calls = 1,
        .http2_max_pings_without_data = 0,
        .http2_min_sent_ping_interval_without_data_ms = 10000,
        .http2_min_recv_ping_interval_without_data_ms = 5000,
        .min_pollers = 2,
        .max_pollers = 4,
    };
    // auto m_grpc_server = {{grpc.namespace}}::{{grpc.class_name}}::create(m_config);
    auto m_grpc_server = std::make_unique<{{grpc.namespace}}::{{grpc.class_name}}>(config);
    namespace asio = boost::asio;

    {% for service_name in grpc.interface -%}
    {% for interface in grpc.interface[service_name] -%}
    {% if interface.type=='bidirectional-streaming-rpc' or interface.type=='client-streaming-rpc' -%}
    m_grpc_server->set{{service_name}}{{interface.name}}RpcCallback(
        [] ({{grpc.namespace}}::{{service_name}}{{interface.name}}RPC& rpc) -> asio::awaitable<void> {
            (void)rpc;
            co_return;
        });
    {% else -%}
    m_grpc_server->set{{service_name}}{{interface.name}}RpcCallback(
        [] ({{grpc.namespace}}::{{service_name}}{{interface.name}}RPC& rpc, {{grpc.package}}::{{interface.input}}& request) -> asio::awaitable<void> {
            (void)rpc;
            (void)request;
            co_return;
        });
    {% endif -%}
    {% endfor -%}
    {% endfor -%}

    m_grpc_server->start();
    std::this_thread::sleep_for(std::chrono::milliseconds(5000));
    m_grpc_server->stop();

    return 0;
}

//-----------------------------------------------------------
{% for service_name in grpc.interface -%}
{% for interface in grpc.interface[service_name] -%}
{% if interface.type=='bidirectional-streaming-rpc' or interface.type=='client-streaming-rpc' %}
asio::awaitable<void> {{interface.name | to_lower_camel}}({{grpc.namespace}}::{{service_name}}{{interface.name}}RPC& rpc){
    (void)rpc;
    co_return;
}
m_grpc_server->set{{service_name}}{{interface.name}}RpcCallback(std::bind_front(&Test::{{interface.name | to_lower_camel}}, this));
{% else %}
asio::awaitable<void> {{interface.name | to_lower_camel}}({{grpc.namespace}}::{{service_name}}{{interface.name}}RPC& rpc, {{grpc.package}}::{{interface.input}}& request) {
    (void)rpc;
    co_return;
}
m_grpc_server->set{{service_name}}{{interface.name}}RpcCallback(std::bind_front(&Test::{{interface.name | to_lower_camel}}, this));

{% endif %}
{% endfor -%}
{% endfor -%}

*/
