#include <{{grpc.out_file | get_filename }}>

int main() {
    {{grpc.namespace}}::GrpcConfig config{
        .host = "0.0.0.0:5566",
        .thread_count = 1,
        .keepalive_time_ms = 10000,
        .keepalive_timeout_ms = 10000,
        .keepalive_permit_without_calls = 1,
        .http2_max_pings_without_data = 0,
        .http2_min_sent_ping_interval_without_data_ms = 10000,
        .http2_min_recv_ping_interval_without_data_ms = 5000,
        .min_pollers = 2,
        .max_pollers = 4,
    };
    auto m_grpc_server = std::make_unique<{{grpc.namespace}}::{{grpc.class_name}}>(config);
    namespace asio = boost::asio;

    {% for service_name in grpc.interface -%}
    {% for interface in grpc.interface[service_name] -%}
    {% if interface.type=='bidirectional-streaming-rpc' or interface.type=='client-streaming-rpc' -%}
    m_grpc_server->set{{service_name}}{{interface.name}}RpcCallback(
        [] ({{grpc.namespace}}::{{service_name}}{{interface.name}}RPC& rpc) -> asio::awaitable<void> {
            (void)rpc;
            co_return;
        });
    {% else -%}
    m_grpc_server->set{{service_name}}{{interface.name}}RpcCallback(
        [] ({{grpc.namespace}}::{{service_name}}{{interface.name}}RPC& rpc, {{grpc.package}}::{{interface.input}}& request) -> asio::awaitable<void> {
            (void)rpc;
            (void)request;
            co_return;
        });
    {% endif -%}
    {% endfor -%}
    {% endfor -%}

    m_grpc_server->start();
    std::this_thread::sleep_for(std::chrono::milliseconds(5000));
    m_grpc_server->stop();

    return 0;
}